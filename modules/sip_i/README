SIP-I Module

Robert-Vladut Patrascu

   <vladp@opensips.org>

   Copyright Â© 2016 OpenSIPS Project
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSIPS Modules
              1.2.2. External Libraries or Applications

        1.3. Parameters

              1.3.1. param_subfield_separator (str)
              1.3.2. isup_mime_str (str)

        1.4. Exported Functions

              1.4.1. add_isup_part([isup_msg_type])

        1.5. Exported PseudoVariables

              1.5.1.
                      $(isup_param(param_name{sep}subfield_name)[byt
                      e_index])

              1.5.2. $isup_msg_type

   List of Examples

   1.1. Set param_subfield_separator parameter
   1.2. Set isup_mime_str parameter
   1.3. add_isup_part usage
   1.4. isup_param usage

Chapter 1. Admin Guide

1.1. Overview

   This module offers the possibility of processing ISDN User
   Part(ISUP) messages encapsulated in SIP. The available
   operations are: reading and modifying parameters from an ISUP
   message, removing or adding new optional parameters, adding an
   ISUP part to a SIP message body. This is done explicitly via
   script pseudovariables and functions.

   The supported ISUP message types are only the ones that can be
   included in a SIP message according to the SIP-I(SIP with
   encapsulated ISUP) protocol defined by ITU-T.

   The format and specification of the ISUP messages and
   parameters follow the recomandations from ITU-T Rec. Q.763.

1.2. Dependencies

1.2.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * None.

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.3. Parameters

1.3.1. param_subfield_separator (str)

   The character to be used as separator in the subname of the
   $isup_param pseudovariable between the ISUP parameter name and
   subfield.

   Default value is "|".

   Example 1.1. Set param_subfield_separator parameter
...
modparam("sip_i", "param_subfield_separator", ":")
...

1.3.2. isup_mime_str (str)

   The string to be used for the Content-Type header field of the
   ISUP MIME body when creating a new ISUP part.

   Default value is "application/ISUP;version=itu-t92+".

   Example 1.2. Set isup_mime_str parameter
...
modparam("sip_i", "isup_mime_str", "application/ISUP;base=itu-t92+;versi
on=itu-t")
...


1.4. Exported Functions

1.4.1.  add_isup_part([isup_msg_type])

   Adds a new ISUP part to the SIP message body.

   The newly added part contains a blank ISUP message(i.e. all
   mandatory parameters zeroed and no optional ones) and all the
   required parameters should be set through $isup_param.

   If the type of the isup message is not explicitly provided, it
   is automatically deduced from the SIP message as follows:
     * INVITE - IAM.
     * BYE - REL.
     * 180, 183 - REL.
     * 4xx, 5xx - REL.
     * 200 OK INVITE - ANM.
     * 200 OK BYE - RLC.

   Meaning of the parameters is as follows:
     * isup_msg_type (string) - name of the ISUP message to be
       added, as it appears in ITU-T Rec. Q.763.

   This function can be used from
   REQUEST_ROUTE,FAILURE_ROUTE,ONREPLY_ROUTE,LOCAL_ROUTE.

   Example 1.3. add_isup_part usage
...
if ($rs == "183") {
        # Encapsulate a CPG
        add_isup_part("Call progress");
        # set desired parameters
        ...
}
...

1.5. Exported PseudoVariables

1.5.1.  $(isup_param(param_name{sep}subfield_name)[byte_index])

   The parameter named param_name of a received or newly added
   ISUP message can be accessed through this read-write variable.
   For optional parameters, writing to a param_name that does not
   exist in this IUSP message will insert it. Assigning null to
   this variable will remove an optional parameter from the
   message or zeroize a mandatory parameter.

   The format of the subname for $isup_param is the following:
     * param_name - name of the ISUP parameter as it appears in
       ITU-T Rec. Q.763
     * sep - separator
     * subfield_name - name of the subfield of the ISUP parameter
       as it appears in ITU-T Rec. Q.763

   The ISUP parameter can be addressed in different ways:
     * entire parameter - by providing as subname for the
       varaiable only the ISUP parameter name, allowing access to
       the contents of the entire parameter as a hex string
       (similar to a hex "dump")
     * at subfield level - by providing as subname for the
       varaiable the ISUP parameter name and the subfield name,
       allowing access to the specific subfield as an integer
       value or string representing a telephone number (for some
       parameters such as Called Party Number)
     * at byte level - by providing as subname for the variable
       the ISUP parameter name and a variable index, allowing
       access to the byte with the specific index as an integer
       value

   Addressing at subfield level is supported only for the
   following ISUP parameters: Called Party Number, Subsequent
   Number, Nature of Connection Indicators, Forward Call
   Indicators, Calling Party Number, Redirection Number, Backward
   Call Indicators, Cause Indicators, Connected Number.

   Example 1.4. isup_param usage
...
        $isup_param(Called Party Number | Nature of address indicator) =
 3;
        $isup_param(Called Party Number | Address signal) = "99991234";
        $isup_param(Calling party's category) = "0a"
        $(isup_param(Forward Call Indicators)[0]) = 96;
        $(isup_param(Forward Call Indicators)[1]) = 1;
...

1.5.2.  $isup_msg_type

   Read-only variable, returns the ISUP message type as string.
